strlen: it returns the number of characters in a zero-terminated array of single-byte characters.

double-byte character sets(DBCSs) were created to support these languages and writing systems.
in a double-byte character set, each character in a string consists of either 1 or 2 bytes.
the ANSI c run-time library has no functions that allow you to manipulate double-byte character sets.
the microsoft Visual C++ run-time library does include a number of functions, such as _mbslen, that allow you to manipulate multibyte character strings.
For example:
    PTSTR CharNext(PCTSTR pszCurrentChar)
    PTSTR CharPrev(PCTSTR pszStart, PCTSTR pszCurrentChar);
    BOOL IsSBCSLeadByte(BYTE bTestChar);
    
Unicode: the wide-byte character set
    all characters in a Unicode string are 16-bit values(2 bytes).
    no need to call functions such as CharNext, CharPrev...
    typedef unsigned short wchar_t;
    char* strcat(char*, const char*);
    wchar_t* wcscat(wchar_t*, const wchar_t*);
    char* strchr(const char*, int);
    wchar_t* wcschr(const wchar_t*, wchar_t);
    int strcmp(const char*, const char*);
    int wcscmp(const wchar_t*, const wchar_t*);
    char* strcpy(char*, const char*);
    wchar_t* wcscpy(wchar_t*, const wchar_t*);
    size_t strlen(const char*);
    size_t wcslen(const wchar_t*);
    wcs: wide character string
    use Tchar.h instead of String.h
    
    TCHAR/_TEXT will be different as the _UNICODE is defined
    WCHAR: Unicode character
    PWSTR: Pointer to a Unicode string
    PCWSTR: Pointer to a constant Unicode string
    
    the _UNICODE macro is used for the C run-time header files.
    the UNICODE macro is used for the windows header files.
    
if you are creating dynamic-link libraries(DLLs) that other software developers will use, consider using this technique:
supply two exported functions in the DLL-an ANSI version and a Unicode version.
in the ANSI version, simply allocate memory, perform the necessary string conversions, and call the Unicode version of the function.

the big problem with the old functions is that they don't accept Unicode strings.
when you call these functions, you must pass ANSI strings.
    
char szA[100];
WCHAR szW[100];
sprintf(szA, "%s", "ANSI Str");
sprintf(szA, "%S", L"Unicode Str");
swprintf(szW, L"%s", L"Unicode Str");
swprintf(szW, L"%S", "ANSI Str");








